{"version":3,"sources":["InputField.js","SubmitButton.js","store/UserStore.js","LoginForm.js","App.js","serviceWorker.js","index.js"],"names":["InputField","className","type","this","props","placeholder","value","onChange","e","target","React","Component","SubmitButton","disabled","onClick","text","extendObservable","loading","isLoggedIn","username","LoginForm","state","password","buttonDisabled","property","val","trim","length","setState","fetch","method","headers","body","JSON","stringify","res","json","result","success","UserStore","resetForm","alert","msg","console","log","setInputValue","onclick","doLogin","App","doLogout","observer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3785c7de.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nclass InputField extends React.Component {\r\n  render() {\r\n    return (\r\n    <div className=\"inputField\">\r\n\r\n      <input\r\n          className='input'\r\n          type={this.props.type}\r\n          placeholder={this.props.placeholder}\r\n          value={this.props.value}\r\n          onChange={ (e) => this.props.onChange(e.target.value)}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n}\r\n\r\nexport default InputField;\r\n","import React from 'react';\r\n\r\n\r\nclass SubmitButton extends React.Component {\r\n  render() {\r\n    return (\r\n    <div className=\"submitButton\">\r\n\r\n        <button \r\n        className='btn'\r\n        disabled={this.props.disabled}\r\n        onClick={() => this.props.onClick }\r\n        >\r\n          {this.props.text}\r\n        </button>\r\n     \r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\n}\r\n\r\nexport default SubmitButton;\r\n","import {extendObservable} from 'mobx';\r\n\r\n\r\nclass UserStore {\r\n    constructor(){\r\n        extendObservable(this , {\r\n            loading: true,\r\n            isLoggedIn: false,\r\n            username: \"\"\r\n        })\r\n    }\r\n}\r\n\r\nexport default new UserStore();","import React from 'react';\r\nimport InputField from './InputField';\r\nimport SubmitButton from './SubmitButton';\r\nimport UserStore from './store/UserStore';\r\n\r\n\r\nclass LoginForm extends React.Component {\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      username: '',\r\n      password: '',\r\n      buttonDisabled: false \r\n\r\n    }\r\n  }\r\n\r\n  setInputValue(property , val){\r\n    val = val.trim();\r\n    if (val.length > 12) {\r\n      return;\r\n    }\r\n    this.setState({\r\n      [property]: val\r\n    })\r\n\r\n  }\r\n      resetForm(){\r\n        this.setState({\r\n          username: '',\r\n          password:'',\r\n          buttonDisabled: false\r\n        })\r\n      }\r\n\r\n      async doLogin(){\r\n        //  when we click submit button\r\n\r\n        if(this.state.username){\r\n          return ;\r\n        }\r\n        if(this.state.password){\r\n          return ;\r\n        }\r\n\r\n        this.setState({\r\n          buttonDisabled: true\r\n        })\r\n\r\n          try {\r\n            let res = await fetch('./login', {\r\n              method: 'post',\r\n              headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n              },\r\n                body:  JSON.stringify({\r\n                  username: this.state.username,\r\n                  password: this.state.password\r\n\r\n                })\r\n            }) ;\r\n\r\n            let result = await res.json();\r\n            if(result && result.success){\r\n              UserStore.isLoggedIn = true;\r\n              UserStore.username = result.username;\r\n            }\r\n            else if (result && result.success === false ){\r\n              //  we are gonna reset form\r\n\r\n              this.resetForm();\r\n              alert(result.msg);\r\n\r\n            }\r\n          }\r\n          catch(e){\r\n            console.log(e);\r\n            this.resetForm();\r\n          }\r\n\r\n      }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n    <div className=\"loginForm\">\r\n\r\n    Log In\r\n        <InputField\r\n            type='text'\r\n            placeholder='Username'\r\n            value={this.state.username ? this.state.username  : ''}\r\n            onChange={(val) => this.setInputValue('username' , val) }\r\n\r\n        />\r\n        <InputField\r\n          type='password'\r\n          placeholder='Password'\r\n          value={this.state.password  ? this.state.password : ''}\r\n          onChange={(val) => this.setInputValue('password', val)}\r\n\r\n        />\r\n        <SubmitButton\r\n                  text='Login'\r\n                  disabled={this.state.buttonDisabled}\r\n                  onclick = {() => this.doLogin() }\r\n\r\n        />\r\n    </div>\r\n  );\r\n}\r\n\r\n}\r\n\r\nexport default LoginForm;\r\n","import React from 'react';\nimport { observer }  from 'mobx-react';\nimport LoginForm from \"./LoginForm\";\n// import InputField from './InputField';\nimport SubmitButton from './SubmitButton';\nimport UserStore from './store/UserStore';\n\nimport './App.css';\n\nclass App extends React.Component {\n\n  async componentDidMount(){\n    try {\n      let res = await fetch('/isLoggedIn',{\n\n        method: 'post',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n\n      });\n\n      let result = await res.json();\n\n      if (result && result.success){\n        // if user loggged in then we set loading to false \n        UserStore.loading = false ;\n        UserStore.isLoggedIn = true ;\n        UserStore.username = result.username;\n      }\n      else{\n        UserStore.loading = false ;\n        UserStore.isLoggedIn = false ;\n        //  if user is not logged in \n      }\n\n    } catch (e) {\n      // if error is returned from the API\n\n      UserStore.loading = false ;\n      UserStore.isLoggedIn = false ;\n\n      \n    }\n  }\n\n  async doLogout() {\n    // used to logout \n    //  async because we gonna use same fetch method here \n    try {\n      let res = await fetch('/logout', {\n\n        method: 'post',\n        headers: {\n          'Accept': 'application/json',\n          'Content-type': 'application/json'\n        }\n\n      });\n\n      let result = await res.json();\n\n      if (result && result.success) {\n        // if user loggged in then we set loading to false \n        UserStore.isLoggedIn = false ;\n        //  it means the user has logged out \n        UserStore.username = '';\n       \n      }\n     \n\n    } catch (e) {\n      // if error is returned from the API\n\n        console.log(e);\n\n    }\n  }\n\n\n  render() {\n\n    if(UserStore.loading){ \n      return (\n    <div className=\"app\">\n\n    <div className='container'>\n      Loading please wait ....\n    </div>\n      \n    </div>\n  );\n    }\n\n    else{\n\n      if(UserStore.isLoggedIn){\n      \n         return (\n    <div className=\"app\">\n      <div className='container'>\n        Welcome {UserStore.username}\n        <SubmitButton\n            text={'Log out'}\n            disabled={false}\n            onClick={() => this.doLogout() }\n\n            />\n      </div>\n    </div>\n  );\n      \n}\n      return (\n  <div className=\"app\">\n\n      <div className='container'>\n      \n\n      <LoginForm />\n\n    </div>\n      \n  </div>\n  );\n\n    \n}\n  \n\n      \n  }\n\n}\n\nexport default observer(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}